--------------------------------------------------------------------------------
--
--   FileName:         hw_image_generator.vhd
--   Dependencies:     none
--   Design Software:  Quartus II 64-bit Version 12.1 Build 177 SJ Full Version
--
--   HDL CODE IS PROVIDED "AS IS."  DIGI-KEY EXPRESSLY DISCLAIMS ANY
--   WARRANTY OF ANY KIND, WHETHER EXPRESS OR IMPLIED, INCLUDING BUT NOT
--   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
--   PARTICULAR PURPOSE, OR NON-INFRINGEMENT. IN NO EVENT SHALL DIGI-KEY
--   BE LIABLE FOR ANY INCIDENTAL, SPECIAL, INDIRECT OR CONSEQUENTIAL
--   DAMAGES, LOST PROFITS OR LOST DATA, HARM TO YOUR EQUIPMENT, COST OF
--   PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY OR SERVICES, ANY CLAIMS
--   BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF),
--   ANY CLAIMS FOR INDEMNITY OR CONTRIBUTION, OR OTHER SIMILAR COSTS.
--
--   Version History
--   Version 1.0 05/10/2013 Scott Larson
--     Initial Public Release
--    
--------------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY hw_image_generator IS
  GENERIC(
   pixels_y :  INTEGER := 478;   --row that first color will persist until
   pixels_x :  INTEGER := 600);  --column that first color will persist until
  
  PORT(
	 disp_ena :  IN   STD_LOGIC;  --display enable ('1' = display time, '0' = blanking time)
    row      :  IN   INTEGER;    --row pixel coordinate
    column   :  IN   INTEGER;    --column pixel coordinate
    red      :  OUT  STD_LOGIC_VECTOR(3 DOWNTO 0) := (OTHERS => '0');  --red magnitude output to DAC
    green    :  OUT  STD_LOGIC_VECTOR(3 DOWNTO 0) := (OTHERS => '0');  --green magnitude output to DAC
    blue     :  OUT  STD_LOGIC_VECTOR(3 DOWNTO 0) := (OTHERS => '0');
	 dipsw 	 :  IN	STD_LOGIC_VECTOR(1 DOWNTO 0);
	 reloj 	 :  IN   STD_LOGIC);
END hw_image_generator;

ARCHITECTURE behavior OF hw_image_generator IS
BEGIN
  PROCESS(disp_ena, row, column)
		VARIABLE num:		std_logic_vector(6 downto 0);
		CONSTANT cero: 	std_logic_vector(6 downto 0):="1000000";
		CONSTANT uno: 		std_logic_vector(6 downto 0):="0111111";
		CONSTANT dos: 		std_logic_vector(6 downto 0):="0000110";
		CONSTANT tres: 	std_logic_vector(6 downto 0):="1100111";
		CONSTANT cuatro: 	std_logic_vector(6 downto 0):="1100110";
		CONSTANT cinco: 	std_logic_vector(6 downto 0):="1101101";
		CONSTANT seis: 	std_logic_vector(6 downto 0):="1111101";
		CONSTANT siete: 	std_logic_vector(6 downto 0):="0000111";
		CONSTANT ocho: 	std_logic_vector(6 downto 0):="1111111";
		CONSTANT nueve: 	std_logic_vector(6 downto 0):="1110011";
		CONSTANT r1: std_logic_vector(3 downto 0):=(OTHERS => '1');
		CONSTANT r0: std_logic_vector(3 downto 0):=(OTHERS => '0');
		CONSTANT g1: std_logic_vector(3 downto 0):=(OTHERS => '1');
		CONSTANT g0: std_logic_vector(3 downto 0):=(OTHERS => '0');
		CONSTANT b1: std_logic_vector(3 downto 0):=(OTHERS => '1');
		CONSTANT b0: std_logic_vector(3 downto 0):=(OTHERS => '0');
	
	
	BEGIN
	num:=ocho;
	
	IF (disp_ena = '1') THEN 
		CASE num IS
		
		-- UNO --
		WHEN uno =>
			IF ((row > 210 and row <240) and (column>140 and column<150)) THEN --7
					red <= (OTHERS => '0');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '0');
			
			ELSIF ((row > 250 and row <280) and (column>140 and column<150)) THEN --6 
					red <= (OTHERS => '1');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '0');
			
			ELSE		
					red <= (OTHERS => '0');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '0');
			END IF;
			
		
		-- CERO --
		WHEN cero =>
			IF ((row > 250 and row <280) and (column>100 and column<110)) THEN --1
					red <= (OTHERS => '0');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '1');
			
			ELSIF ((row > 210 and row <240) and (column>110 and column<110)) THEN --2
					red <= (OTHERS => '0');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '0');
			
			ELSIF ((row > 240 and row <250) and (column>110 and column<140)) THEN --4
					red <= (OTHERS => '0');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '1');
					
			ELSIF ((row > 200 and row <210) and (column>110 and column<140)) THEN --5
					red <= (OTHERS => '1');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '1');
			
			ELSIF ((row > 250 and row <280) and (column>140 and column<150)) THEN --6
					red <= (OTHERS => '0');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '1');
					
			ELSIF ((row > 210 and row <240) and (column>140 and column<150)) THEN --7
					red <= (OTHERS => '1');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '0');
			
			ELSE		
					red <= (OTHERS => '0');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '0');
			END IF;
		
			
			
		-- DOS --
		WHEN dos =>
			IF ((row > 200 and row <210) and (column>110 and column<140)) THEN --5
					red <= (OTHERS => '0');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '1');
			
			ELSIF ((row > 210 and row <240) and (column>110 and column<110)) THEN --2
					red <= (OTHERS => '0');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '0');
					
			ELSIF ((row > 280 and row <290) and (column>110 and column<140)) THEN --3
					red <= (OTHERS => '1');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '1');
			
			ELSIF ((row > 250 and row <280) and (column>140 and column<150)) THEN --6
					red <= (OTHERS => '0');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '1');
					
			ELSIF ((row > 240 and row <250) and (column>110 and column<140)) THEN --4
					red <= (OTHERS => '1');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '1');
			
			ELSE		
					red <= (OTHERS => '0');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '0');
			END IF;
			
		
		-- TRES --
		WHEN tres =>
			IF ((row > 200 and row <210) and (column>110 and column<140)) THEN
					red <= (OTHERS => '1');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '0');
			
			ELSIF ((row > 210 and row <240) and (column>140 and column<150)) THEN
					red <= (OTHERS => '0');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '0');
					
			ELSIF ((row > 250 and row <280) and (column>140 and column<150)) THEN
					red <= (OTHERS => '1');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '1');
			
			ELSIF ((row > 210 and row <240) and (column>140 and column<150)) THEN
					red <= (OTHERS => '0');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '1');
			
			ELSE		
					red <= (OTHERS => '0');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '0');
			END IF;
		
		
		-- CUATRO --
		WHEN cuatro =>
			IF ((row > 250 and row <280) and (column>100 and column<110)) THEN --1
					red <= (OTHERS => '1');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '0');
			
			ELSIF ((row > 240 and row <250) and (column>110 and column<140)) THEN --4
					red <= (OTHERS => '0');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '0');
					
			ELSIF ((row > 250 and row <280) and (column>140 and column<150)) THEN --6
					red <= (OTHERS => '1');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '1');
			
			ELSIF ((row > 210 and row <240) and (column>140 and column<150)) THEN --7
					red <= (OTHERS => '0');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '1');
			
			ELSE		
					red <= (OTHERS => '0');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '0');
			END IF;
		
		
		
		-- CINCO --
		WHEN cinco =>
			IF ((row > 280 and row <290) and (column>110 and column<140)) THEN --3
					red <= (OTHERS => '0');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '1');
			
			ELSIF ((row > 250 and row <280) and (column>100 and column<110)) THEN --1
					red <= (OTHERS => '0');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '0');
					
			ELSIF ((row > 240 and row <250) and (column>110 and column<140)) THEN --4
					red <= (OTHERS => '1');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '1');
			
			ELSIF ((row > 210 and row <240) and (column>140 and column<150)) THEN --7
					red <= (OTHERS => '0');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '1');
					
			ELSIF ((row > 200 and row <210) and (column>110 and column<140)) THEN --5
					red <= (OTHERS => '1');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '1');
			
			ELSE		
					red <= (OTHERS => '0');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '0');
			END IF;
		
		
		-- SEIS --
		WHEN seis =>
			IF ((row > 280 and row <290) and (column>110 and column<140)) THEN --3
					red <= (OTHERS => '0');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '1');
			
			ELSIF ((row > 250 and row <280) and (column>100 and column<110)) THEN --1
					red <= (OTHERS => '0');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '0');
					
			ELSIF ((row > 240 and row <250) and (column>110 and column<140)) THEN --4
					red <= (OTHERS => '1');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '1');
			
			ELSIF ((row > 210 and row <240) and (column>140 and column<150)) THEN --7
					red <= (OTHERS => '0');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '1');
					
			ELSIF ((row > 200 and row <210) and (column>110 and column<140)) THEN --5
					red <= (OTHERS => '1');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '1');
					
			ELSIF ((row > 210 and row <240) and (column>110 and column<110)) THEN --2
					red <= (OTHERS => '1');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '0');
			
			ELSE		
					red <= (OTHERS => '0');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '0');
			END IF;
		
		
		-- SIETE --
		WHEN siete =>
			IF ((row > 280 and row <290) and (column>110 and column<140)) THEN --3
					red <= (OTHERS => '0');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '1');
			
			ELSIF ((row > 250 and row <280) and (column>140 and column<150)) THEN --6
					red <= (OTHERS => '0');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '0');
					
			ELSIF ((row > 210 and row <240) and (column>140 and column<150)) THEN --7
					red <= (OTHERS => '1');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '1');
			
			ELSE		
					red <= (OTHERS => '0');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '0');
			END IF;
			
			
		-- OCHO --
		WHEN ocho =>
			IF ((row > 250 and row <280) and (column>100 and column<110)) THEN --1
					red <= (OTHERS => '0');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '1');
			
			ELSIF ((row > 210 and row <240) and (column>110 and column<110)) THEN --2
					red <= (OTHERS => '0');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '0');
					
			ELSIF ((row > 280 and row <290) and (column>110 and column<140)) THEN --3
					red <= (OTHERS => '1');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '1');
			
			ELSIF ((row > 240 and row <250) and (column>110 and column<140)) THEN --4
					red <= (OTHERS => '0');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '1');
					
			ELSIF ((row > 200 and row <210) and (column>110 and column<140)) THEN --5
					red <= (OTHERS => '1');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '1');
			
			ELSIF ((row > 250 and row <280) and (column>140 and column<150)) THEN --6
					red <= (OTHERS => '0');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '1');
					
			ELSIF ((row > 210 and row <240) and (column>140 and column<150)) THEN --7
					red <= (OTHERS => '1');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '0');
			
			ELSE		
					red <= (OTHERS => '0');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '0');
			END IF;
			
		
		-- NUEVE --
		WHEN nueve =>
			IF ((row > 250 and row <280) and (column>100 and column<110)) THEN --1
					red <= (OTHERS => '0');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '1');
			
			ELSIF ((row > 280 and row <290) and (column>110 and column<140)) THEN --3
					red <= (OTHERS => '0');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '0');
					
			ELSIF ((row > 250 and row <280) and (column>140 and column<150)) THEN --6
					red <= (OTHERS => '1');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '0');
			
			ELSIF ((row > 240 and row <250) and (column>110 and column<140)) THEN --4
					red <= (OTHERS => '1');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '0');
					
			ELSIF ((row > 210 and row <240) and (column>140 and column<150)) THEN --7
					red <= (OTHERS => '1');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '1');
			
			ELSIF ((row > 200 and row <210) and (column>110 and column<140)) THEN --5
					red <= (OTHERS => '0');
					green <= (OTHERS => '1');
					blue <= (OTHERS => '1');
			
			ELSE		
					red <= (OTHERS => '0');
					green <= (OTHERS => '0');
					blue <= (OTHERS => '0');
			END IF;
			
			WHEN OTHERS => red <= r0; 
								green <= g0;
								blue <= b0;
		
		END CASE;
	END IF;
END PROCESS;
 
END behavior;